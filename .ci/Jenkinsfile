@Library("jenlib") _

final String PROJECT_NAME = "much-demos-such-wow"

try {
	withCcache() {
		wafDefaultPipeline(
			projects           : ["${PROJECT_NAME}"],
			container          : [app: "dls"],
			moduleOptions      : [modules: ["ppu-toolchain"]],
			testSlurmResource  : [partition: "cube", wafer: 62, "fpga-without-aout": 0],
			preTestHook        : { configureHxCubeBitfile() },
			testOptions        : "--test-execall -j1",
			notificationChannel: "#jenkins-trashbin",  // success is checked globally
			configureInstallOptions: "--build-profile=ci"
		)
	}

	stage("Archive Results") {
		runOnSlave(label: "frontend") {
			archiveArtifacts("build/${PROJECT_NAME}/**/*")
			publishHTML([allowMissing: false,
			             reportDir   : "build/${PROJECT_NAME}/html",
			             reportFiles : "index.html",
			             reportName  : "HTML Output"])
		}
	}

	if (env.GERRIT_EVENT_TYPE == "change-merged") {
		stage("Deploy jupyter notebooks") {
			runOnSlave(label: "frontend") {
				jesh("bash ${PROJECT_NAME}/.ci/deploy_jupyter-notebooks.sh")
			}
		}
	}
} catch (Throwable t) {
	notifyFailure(mattermostChannel: "#1nicedemo")
	throw t
}

if (currentBuild.currentResult != "SUCCESS") {
	notifyFailure(mattermostChannel: "#1nicedemo")
}
